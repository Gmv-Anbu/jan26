import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { IGetFavoriteAssetList } from '@apps/customer/api/customer/IuserService';
import UserService from '../../api/customer/UserService';
import { setItem, KEYS, getItem } from '../../utils/storage';
const initialState = {
  userDetails: getItem(KEYS.CUSTOMER_USER) || {},
  status: 'idle',
  favoriteNfts: {},
  userConfig: [],
};
export const getProfile = createAsyncThunk(
  'userData/getProfile',
  async (token: string = undefined, thunkAPI) => {
    const response: any = await UserService.getUserProfile(undefined, token);
    if (response?.error) thunkAPI.rejectWithValue(response.error);
    return response.data;
  }
);

export const deleteProfileData = createAsyncThunk('userData/deleteProfileData',
  async () => {
    return {};
  }
);

export const getConfig = createAsyncThunk(
  'userData/getConfig',
  async () => {
    const response: any = await UserService.getConfigs();
    if (response.status === 200)

      return response.data;
  }

);

// export const getProfile = createAsyncThunk(
//   'user/getProfile',
//   async (_, thunkAPI) => {
//     let response: any;
//     response = await UserService.getProfile('');
//     if (response?.error) thunkAPI.rejectWithValue(response.error);
//     return response.data;
//   }
// );

export const getFavoriteNFts = createAsyncThunk(
  'userData/getFvoriteNfts',
  async (data: IGetFavoriteAssetList, thunkAPI) => {
    const response: any = await UserService.getFavoriteAssetList(data);
    if (response.status === 200) return response.data;
    else thunkAPI.rejectWithValue(response.error);
  }
);

export const authSlice = createSlice({
  name: 'userData',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    updateUserDetails: (state, action) => {
      state.userDetails = action.payload
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getProfile.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(getProfile.fulfilled, (state, action) => {
        state.status = 'idle';
        state.userDetails = action.payload?.data;
        setItem(KEYS.CUSTOMER_USER, action.payload?.data);
      })
      .addCase(getProfile.rejected, (state, action) => {
        state.status = 'idle';
        state.userDetails = {};
      })
      .addCase(deleteProfileData.fulfilled, (state, action) => {
        state.status = 'idle';
        state.userDetails = {};
      })
      /****to hadle favorite listing api */
      .addCase(getFavoriteNFts.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(getFavoriteNFts.fulfilled, (state, action) => {
        state.status = 'idle';
        state.favoriteNfts = action.payload?.data;
      })
      .addCase(getFavoriteNFts.rejected, (state, action) => {
        state.status = 'idle';
        state.favoriteNfts = {};
      })
      .addCase(getConfig.pending, (state, action) => {
        state.status = 'loading'
      })
      .addCase(getConfig.fulfilled, (state, action) => {
        state.status = 'idle';
        state.userConfig = action.payload?.data;
      })
      .addCase(getConfig.rejected, (state, action) => {
        state.status = 'idle';
        state.userConfig = [];
      });
    /***** */
  },
});
export const { updateUserDetails } = authSlice.actions
export default authSlice.reducer;

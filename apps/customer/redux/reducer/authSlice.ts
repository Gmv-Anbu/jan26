import { removeCookie, setCookie } from '@nft-marketplace/js-cookie'
import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'
import { HYDRATE } from 'next-redux-wrapper'
import WalletConnectService from '../../api/customer/WalletConnectService'
import { setItem, KEYS, getItem, removeAllItemForcely, removeItem } from '../../utils/storage'
import { getProfile } from './userSlice'

const initialState = {
  accessToken: undefined,
  connectStatus: "",
  account: {
    accessToken: getItem(KEYS.TOKEN),
  },
  status: 'idle',
}

export const connectWallet = createAsyncThunk('auth/connectWallet', async (data: { walletAddress: string; signature: string; email?: string }, thunkAPI) => {
  let response
  // if ('hedera' == 'hedera') {
  try {
    response = await WalletConnectService.connectWalletHedra(data)
  } catch (error) {
    console.log('@@@ show connection error', error)
  }
  // response = await WalletConnectService.connectWalletHedra(data);
  // } else {
  //   response = await WalletConnectService.connectWallet(data);
  // }
  if (response?.error) thunkAPI.rejectWithValue(response.error)
  else {
    console.log('reject')
    await thunkAPI.dispatch(getProfile(response.data?.data?.accessToken))
  }
  if (response.data) return response.data
  else return response.error
})

export const authSlice = createSlice({
  name: 'auth',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    disconnectWallet: (state) => {
      state.accessToken = undefined;
      removeItem(KEYS.CUSTOMER_USER);
      removeCookie(KEYS.CUSTOMER_TOKEN);
      removeCookie(KEYS.CURRENT_PROVIDER_NAME);
      removeItem('walletconnect')
    },
    loginUser: (state,action) => {
      state.accessToken = action.payload
    },
    updateConnection: (state, action) => {
      state.connectStatus = action.payload
    },
    // disconnectWallet: (state) => {
    //   state.account = {
    //     accessToken: undefined,
    //   };
    //   removeAllItemForcely();
    // },
    hydrateAuthentication: (state, action) => {
      state.accessToken = action.payload
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(connectWallet.pending, (state) => {
        state.status = 'loading'
      })
      .addCase(connectWallet.fulfilled, (state, action) => {
        state.status = 'idle'
        state.accessToken = action.payload?.data?.accessToken
      })
      .addCase(connectWallet.rejected, (state, action) => {
        state.status = 'idle'
        state.accessToken = undefined
      })
  },
})

export const { disconnectWallet, hydrateAuthentication, loginUser, updateConnection } = authSlice.actions
export default authSlice.reducer
